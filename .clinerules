# Project Configuration

## Tech Stack

- Next.js 14+ with App Router
- Tailwind CSS for styling
- Supabase for backend
- Vercel for deployment
- GitHub for version control

## Project Structure

/src
  /app         # Next.js App Router pages
  /components  # React components
  /lib         # Utility functions
  /types       # TypeScript types
/supabase
  /migrations  # SQL migration files
  /seed        # Seed data files
/public        # Static assets

## Database Migrations

SQL files in /supabase/migrations should:

- Use sequential numbering: 001, 002, etc.
- Include descriptive names
- Be reviewed by Cline before execution
Example: 001_create_users_table.sql

## Development Workflow

- Cline helps write and review code changes
- Vercel automatically deploys from main branch
- Database migrations reviewed by Cline before execution

## Security

DO NOT read or modify:

- .env files
- **/config/secrets.*
- Any file containing API keys or credentials

## Technical Learnings

### Next.js Module System

- Next.js 15+ configuration files with `.mjs` extension must use ES Module syntax (`export default`) rather than CommonJS (`module.exports`)
- This applies to configuration files like postcss.config.mjs, tailwind.config.mjs, etc.
- Files with `.js` extension can continue to use CommonJS syntax
- Mixing module systems incorrectly leads to "module is not defined in ES module scope" errors

### Windows/PowerShell Environment

- Always track current working directory when executing commands
- Do not prepend `cd frontend &&` when already in the frontend directory
- PowerShell in Windows does not support creating multiple files/directories by separating arguments with spaces (unlike bash)
- Use PowerShell-specific syntax for file/directory operations:
  - Creating directories: `New-Item -ItemType Directory -Path "path\to\dir"` or `mkdir "path\to\dir"`
  - Creating multiple directories: `mkdir "dir1","dir2","dir3"` (comma-separated)
  - Creating files: `New-Item -ItemType File -Path "path\to\file"` or `ni "path\to\file"`
  - Creating paths with multiple directories: `mkdir -p "path\to\nested\dir"` will fail; use `New-Item -ItemType Directory -Path "path\to\nested\dir" -Force` instead

### Integration Framework Patterns

- **Adapter Pattern**: All external service integrations use a consistent adapter pattern
  - BaseAdapter abstract class defines standard interface for all service adapters
  - Service-specific adapters extend BaseAdapter with custom implementation
  - IntegrationManager singleton coordinates all adapters and provides central access point
- **Retry Strategy**: Exponential backoff with jitter for resilient API calls
  - Configurable max attempts, base delay, and max delay
  - Automatic categorization of errors as retryable or non-retryable
  - Exponential increase in wait time between attempts with random jitter
- **Caching Strategy**: Using Supabase tables as cache layer for external data
  - Standard schema pattern with original_data, version, and sync_status fields
  - Metadata tracking for sync status and timestamps
  - Consistent invalidation strategies (time-based, version-based, action-based)
- **Error Handling**: Comprehensive error handling with specific error types
  - Categorized errors (authentication, rate limit, network, etc.)
  - Consistent error format with operation, code, and message
  - Propagation of external service errors with proper context

### Next.js Compiler Configuration

- **SWC vs Babel**: Next.js uses SWC by default, but falls back to Babel if a `.babelrc` file exists
  - SWC is significantly faster than Babel for development and builds
  - Some Next.js features like `next/font` specifically require SWC
  - Custom Babel config can conflict with SWC features
- **Jest Configuration**: Jest uses its own Babel config from jest.config.js
  - No need for a separate `.babelrc` file if transform options are properly set in jest.config.js
  - TypeScript files use ts-jest, while JavaScript files use babel-jest with Next.js preset
- **Font Strategy**: Use next/font APIs for optimized font loading
  - Enables automatic optimization, reduced CLS, and proper font loading
  - Requires SWC to be enabled (no custom `.babelrc` file)

### Testing Strategy

- **Unit Testing**: Jest with TypeScript support
  - Babel configuration to support ES Module syntax in tests
  - Specific configuration directly in jest.config.js
  - Component isolation with mock dependencies
- **Integration Testing**: Testing adapters with mock services
  - MSW for simulating external API responses
  - Fixture data for predictable testing
  - Comprehensive test coverage for error cases
- **Mock Adapter Pattern**: Standard approach for testing integration components
  - MockAdapter class implementing BaseAdapter interface
  - Configurable responses and error scenarios
  - Tracking of calls for verification

### Role-Based Security Model

- **Row Level Security**: Supabase RLS policies for data protection
  - Security definer functions to avoid infinite recursion
  - Role-specific policies with proper user identification
  - Development-friendly policies for testing different roles
- **Role Management**: Database-driven role assignments
  - User roles stored in dedicated tables with RLS 
  - Role change request system for changing access levels
  - Automatic profile creation for new users
- **UI Protection**: Role-specific portal access
  - Server-side redirect protection for unauthorized access
  - Client-side route guards with session validation
  - Uniform portal switching mechanism across all role types
