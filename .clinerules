# Project Configuration

## Tech Stack

- Next.js 14+ with App Router
- Tailwind CSS for styling
- Supabase for backend
- Vercel for deployment
- GitHub for version control

## Project Structure

/src
  /app         # Next.js App Router pages
  /components  # React components
  /lib         # Utility functions
  /types       # TypeScript types
/supabase
  /migrations  # SQL migration files
  /seed        # Seed data files
/public        # Static assets

## Database Migrations

SQL files in /supabase/migrations should:

- Use sequential numbering: 001, 002, etc.
- Include descriptive names
- Be reviewed by Cline before execution
Example: 001_create_users_table.sql

## Development Workflow

- Cline helps write and review code changes
- Vercel automatically deploys from main branch
- Database migrations reviewed by Cline before execution

## Security

DO NOT read or modify:

- .env files
- **/config/secrets.*
- Any file containing API keys or credentials

## Technical Learnings

### Next.js Module System

- Next.js 15+ configuration files with `.mjs` extension must use ES Module syntax (`export default`) rather than CommonJS (`module.exports`)
- This applies to configuration files like postcss.config.mjs, tailwind.config.mjs, etc.
- Files with `.js` extension can continue to use CommonJS syntax
- Mixing module systems incorrectly leads to "module is not defined in ES module scope" errors

### Windows/PowerShell Environment

- Always track current working directory when executing commands
- Do not prepend `cd frontend &&` when already in the frontend directory
- PowerShell in Windows does not support creating multiple files/directories by separating arguments with spaces (unlike bash)
- Use PowerShell-specific syntax for file/directory operations:
  - Creating directories: `New-Item -ItemType Directory -Path "path\to\dir"` or `mkdir "path\to\dir"`
  - Creating multiple directories: `mkdir "dir1","dir2","dir3"` (comma-separated)
  - Creating files: `New-Item -ItemType File -Path "path\to\file"` or `ni "path\to\file"`
  - Creating paths with multiple directories: `mkdir -p "path\to\nested\dir"` will fail; use `New-Item -ItemType Directory -Path "path\to\nested\dir" -Force` instead
